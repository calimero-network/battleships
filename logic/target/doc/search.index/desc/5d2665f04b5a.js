rd_("AnThe x-coordinate (column, 0-9)AkThe y-coordinate (row, 0-9)AoUnique identifier for the matchBeCell was shot and contains a hit shipC`Represents the state of a cell on the game boardAkCell was shot but was emptyAlCell contains part of a shipBjRepresents a single ship on the game boardAoReturns the argument unchanged.0000000000000000000000000000000000000000000000000000000kGame ModuleBaCalls <code>U::from(self)</code>.0000000000000000000000000000000000000000000000000000000BlReturns the name of this validation strategy0AnBoard size for bounds checkingCbThe board size (always 10 for standard battleship)01AoCurrent player whose turn it isCaRepresents a game board as a flat vector of cellsAmEmpty cell (no ship, no shot)BeDomain events for the battleship gameBmRepresents a collection of ships for a playerBkRepresents a game match between two playersAmThe game board for validationlBoard ModuleBmFlat vector representation of the board cells2CbMultiple ship coordinate sets for fleet validationlShips ModuleAlVector of ships in the fleet2BlFlat vector representation of the shot cellsBcEmitted when a winner is determinedmEvents ModuleBnThe length of the ship (number of coordinates)AlWinner of the match (if any)CkInvalid input or state (e.g., invalid coordinates, game \xe2\x80\xa6BjCell has a pending shot (not yet resolved)AkFirst player\xe2\x80\x99s public keyAlSecond player\xe2\x80\x99s public keynPlayers ModuleAfGame has already endedBkResource not found (e.g., match ID, player)AeBattleship Game LogicAnPlayer1\xe2\x80\x99s shot history boardAnPlayer2\xe2\x80\x99s shot history boardBnValidates the given input and returns a resultBnExecutes all validation strategies in sequenceCiOperation not allowed (e.g., not your turn, not a player)C`Comprehensive error type for all game operationsCeRepresents a player\xe2\x80\x99s public key for identificationBjEmitted when a shot is resolved (hit/miss)CdRepresents a player\xe2\x80\x99s shots view for API responsesAlX coordinate of pending shotAlY coordinate of pending shotBfWhether player1 has placed their shipsBfWhether player2 has placed their shipsBoStandard board size for battleship (10x10 grid)CbRepresents a coordinate position on the game boardBaEmitted when a match is completedAkValidation Strategy PatternCcRepresents a player\xe2\x80\x99s private board and ship dataBhEmitted when a player places their shipsBkVector of coordinates that make up the shipAgCoordinates to validateBlPlaces ships on the current player\xe2\x80\x99s boardBaShip length for length validationBcEmitted when a new match is createdChRepresents a player\xe2\x80\x99s own board view for API responsesBeEmitted when a player proposes a shotBoService for resolving shot outcomes in the gameBiAdds a validation strategy to the contextCnCreates a new match between the current player and another \xe2\x80\xa6BcLoad the state from private storageBcPlayer targeted by the pending shotCaGet a handle to the private storage for this typeBoCreates a validation context for ship placementC`Returns the number of strategies in this contextCcReturns the names of all strategies in this contextBnMain application state for the battleship gameBdInput data for validation strategiesBaPlayer who fired the pending shotCkCreates a validation context for coordinate validation onlyCkManages validation strategies and executes them in sequenceCbCreates a validation context for fleet compositionBjFleet composition counts [2,3,4,5] lengthsBlParses ship coordinates from a string formatC`Trait defining the validation strategy interfaceCiValidates coordinates using the coordinates-only strategyBiLoad the state or initialize with defaultCjValidates ship placement using the validation strategy \xe2\x80\xa6CjValidates ship placement using the ship placement strategyCbValidates that coordinates are within board boundsChValidates that ship placement doesn\xe2\x80\x99t overlap with \xe2\x80\xa6CcLoad the state or initialize with a custom functionCkValidates fleet composition using the fleet composition \xe2\x80\xa6CcValidates that ships are not adjacent to each otherBnValidates that ship coordinates are contiguousC`Validates ship length is within acceptable rangeCeValidates that coordinates are unique (no duplicates)CdValidates that ships don\xe2\x80\x99t overlap with each otherBiValidates that ship is in a straight line5CkValidates fleet composition follows standard battleship \xe2\x80\xa6")